@using dotnetfashionassistant.Models
@using dotnetfashionassistant.Services
@using Microsoft.Extensions.Configuration
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration configuration
@inject IJSRuntime JSRuntime
@inject dotnetfashionassistant.Services.AzureAIAgentService AzureAIAgentService
@inject dotnetfashionassistant.Services.AgentModeService AgentModeService
@inject dotnetfashionassistant.Services.CartUpdateService CartUpdateService
@rendermode InteractiveServer

<div class="chat-container">
    <div class="chat-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h5 class="mb-0">Fashion Assistant</h5>
                @{
                    var currentAgentId = AzureAIAgentService.GetCurrentAgentId();
                    if (!string.IsNullOrEmpty(currentAgentId))
                    {
                        var shortId = currentAgentId.Length > 8 ? currentAgentId.Substring(0, 8) + "..." : currentAgentId;
                        <small class="text-muted">Agent: @shortId</small>
                    }
                    else
                    {
                        <small class="text-warning">Agent: Not configured</small>
                    }
                }
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleAgentSettings" title="Agent Settings">
                    <i class="bi bi-gear"></i>
                </button>
                <button class="btn btn-sm btn-outline-primary" @onclick="StartNewConversation">
                    <i class="bi bi-plus-circle"></i> New
                </button>
            </div>
        </div>
        
        @if (showAgentSettings)
        {
            <div class="agent-settings mt-2 p-2 border rounded bg-light">
                <div class="row align-items-center mb-2">
                    <div class="col-auto">
                        <small class="text-muted">Current Agent ID:</small>
                    </div>
                    <div class="col">
                        <code class="small bg-white px-2 py-1 rounded border @(AzureAIAgentService.IsAgentIdModified() ? "border-warning" : "")">
                            @(AzureAIAgentService.GetCurrentAgentId() ?? "Not set")
                        </code>
                        @if (AzureAIAgentService.IsAgentIdModified())
                        {
                            <small class="text-warning ms-2"><i class="bi bi-exclamation-triangle"></i> Modified</small>
                        }
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(AzureAIAgentService.GetOriginalAgentId()))
                {
                    <div class="row align-items-center mb-2">
                        <div class="col-auto">
                            <small class="text-muted">Original (env):</small>
                        </div>
                        <div class="col">
                            <code class="small bg-light px-2 py-1 rounded border text-muted">
                                @AzureAIAgentService.GetOriginalAgentId()
                            </code>
                        </div>
                    </div>
                }
                <div class="row align-items-center">
                    <div class="col-auto">
                        <small class="text-muted">New Agent ID:</small>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control form-control-sm" @bind="tempAgentId" placeholder="Enter Agent ID" />
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-sm btn-success" @onclick="UpdateAgentId" disabled="@string.IsNullOrWhiteSpace(tempAgentId)">
                            <i class="bi bi-check"></i>
                        </button>
                        <button class="btn btn-sm btn-secondary ms-1" @onclick="CancelAgentSettings">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(agentSettingsMessage))
                {
                    <div class="mt-1">
                        <small class="@(agentSettingsSuccess ? "text-success" : "text-danger")">@agentSettingsMessage</small>
                    </div>
                }
            </div>
        }
    </div>
    
    <div class="chat-messages" id="chatMessages">
        @if (chatHistory.Count == 0)
        {
            <div class="chat-message agent-message">
                <div class="message-content">
                    <p>Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?</p>
                </div>
            </div>
        }
        else
        {
            @foreach (var msg in chatHistory)
            {
                <div class="chat-message @(msg.IsUser ? "user-message" : "agent-message")">
                    <div class="message-content">
                        @if (msg.IsUser)
                        {
                            <p>@msg.Content</p>
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(msg.FormattedContent))
                            {
                                @((MarkupString)msg.FormattedContent)
                            }
                            else
                            {
                                <p>@msg.Content</p>
                            }
                        }
                    </div>
                </div>
            }
        }

        @if (isLoading)
        {
            <div class="chat-message agent-message">
                <div class="message-content typing-indicator">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        }
    </div>

    <div class="chat-input-container">
        <input type="text" 
               class="chat-input" 
               placeholder="Type your message here..." 
               @bind="chatMessage" 
               @bind:event="oninput" 
               @onkeypress="HandleKeyPress" />
        <button class="chat-send-btn" @onclick="SendChatMessage" disabled="@(isLoading || string.IsNullOrWhiteSpace(chatMessage))">
            <i class="bi bi-send-fill"></i>
        </button>
    </div>
</div>

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
        background-color: white;
    }

    .chat-header {
        padding: 15px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }
    
    .agent-settings {
        background-color: #f8f9fa !important;
        border: 1px solid #dee2e6 !important;
        font-size: 0.875rem;
    }
    
    .agent-settings .form-control-sm {
        font-size: 0.8rem;
        height: calc(1.5em + 0.25rem + 2px);
    }
    
    .agent-settings .btn-sm {
        padding: 0.1rem 0.3rem;
        font-size: 0.8rem;
    }
    
    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        background-color: #f8f9fa;
        min-height: 0;
    }
    
    .chat-message {
        display: flex;
        margin-bottom: 10px;
    }
    
    .user-message {
        justify-content: flex-end;
    }
    
    .agent-message {
        justify-content: flex-start;
    }
    
    .message-content {
        max-width: 85%;
        padding: 10px 15px;
        border-radius: 18px;
        word-wrap: break-word;
    }
    
    .user-message .message-content {
        background-color: #0d6efd;
        color: white;
        border-bottom-right-radius: 5px;
    }
    
    .agent-message .message-content {
        background-color: #e9ecef;
        color: #212529;
        border-bottom-left-radius: 5px;
    }
    
    .message-content p {
        margin: 0;
        font-size: 0.9rem;
    }
    
    .chat-input-container {
        display: flex;
        padding: 15px;
        background-color: white;
        border-top: 1px solid #dee2e6;
        gap: 10px;
    }
    
    .chat-input {
        flex-grow: 1;
        padding: 10px 15px;
        border: 1px solid #dee2e6;
        border-radius: 20px;
        outline: none;
        font-size: 0.9rem;
    }
    
    .chat-send-btn {
        width: 40px;
        height: 40px;
        border: none;
        background-color: #0d6efd;
        color: white;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }
    
    .chat-send-btn:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }
    
    /* Typing indicator */
    .typing-indicator {
        display: flex;
        align-items: center;
        gap: 2px;
    }
    
    .typing-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: #6c757d;
        animation: typing 1.4s infinite ease-in-out;
    }
    
    .typing-dot:nth-child(1) {
        animation-delay: -0.32s;
    }
    
    .typing-dot:nth-child(2) {
        animation-delay: -0.16s;
    }
    
    .typing-dot:nth-child(3) {
        animation-delay: 0;
    }
    
    @@keyframes typing {
        0%, 80%, 100% {
            transform: scale(0);
        }
        40% {
            transform: scale(1);
        }
    }
</style>

@code {
    private List<ChatMessage> chatHistory = new List<ChatMessage>();
    private string chatMessage = string.Empty;
    private bool isLoading = false;
    private string? currentThreadId;
    
    // Agent settings variables
    private bool showAgentSettings = false;
    private string tempAgentId = string.Empty;
    private string agentSettingsMessage = string.Empty;
    private bool agentSettingsSuccess = false;
    private string? lastKnownAgentId = null;

    protected override void OnInitialized()
    {
        // Initialize with the current thread ID if available
        currentThreadId = AgentModeService.CurrentThreadId;
        
        // Initialize temp agent ID with current value
        tempAgentId = AzureAIAgentService.GetCurrentAgentId() ?? string.Empty;
        lastKnownAgentId = tempAgentId;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Check if Agent ID has changed (e.g., after reconnection)
        var currentAgentId = AzureAIAgentService.GetCurrentAgentId();
        if (currentAgentId != lastKnownAgentId)
        {
            lastKnownAgentId = currentAgentId;
            tempAgentId = currentAgentId ?? string.Empty;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register JS function for scrolling
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToBottom = function(elementId) {
                    var element = document.getElementById(elementId);
                    if (element) {
                        element.scrollTop = element.scrollHeight;
                    }
                }
            ");
            
            // Load chat history asynchronously after the first render for better performance
            await LoadChatHistoryAsync();
        }
        
        // Scroll to bottom whenever component rerenders
        await ScrollToBottom();
    }

    private async Task LoadChatHistoryAsync()
    {
        if (string.IsNullOrEmpty(currentThreadId))
        {
            return;
        }

        // For now, we'll skip loading chat history from the service
        // as the method doesn't exist in the current implementation
        await Task.CompletedTask;
    }

    private void StartNewConversation()
    {
        // Clear the current thread ID
        currentThreadId = null;
        AgentModeService.CurrentThreadId = null;
        
        // Reset the chat history
        chatHistory.Clear();
        
        // Add a welcome message
        chatHistory.Add(new ChatMessage
        {
            Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
            IsUser = false,
            Timestamp = DateTime.Now
        });
        
        // Update the UI
        StateHasChanged();
    }

    private async Task SendChatMessage()
    {
        if (string.IsNullOrWhiteSpace(chatMessage))
            return;
            
        // Add user message to chat history
        chatHistory.Add(new ChatMessage { 
            Content = chatMessage, 
            IsUser = true,
            Timestamp = DateTime.Now 
        });
        
        string userMessage = chatMessage;
        chatMessage = string.Empty; // Clear input field
        isLoading = true;
        StateHasChanged(); // Update UI to show user message
        
        try
        {
            // Create a thread if this is the first message
            if (string.IsNullOrEmpty(currentThreadId))
            {
                currentThreadId = await AzureAIAgentService.CreateThreadAsync();
                AgentModeService.CurrentThreadId = currentThreadId;
            }
              
            // Send message to Azure AI Agent and get response
            string aiResponse = await AzureAIAgentService.SendMessageAsync(currentThreadId, userMessage);
            
            // Format the response for better HTML display
            string formattedResponse = FormatAgentResponse(aiResponse);
            
            // Add AI response to chat history
            chatHistory.Add(new ChatMessage { 
                Content = aiResponse,
                FormattedContent = formattedResponse,
                IsUser = false,
                Timestamp = DateTime.Now 
            });
            
            // Check if the response mentions adding items to cart
            if (aiResponse.Contains("added to your cart") || 
                aiResponse.Contains("been added to your cart") || 
                aiResponse.Contains("Added to cart") ||
                aiResponse.Contains("item to your cart") ||
                aiResponse.Contains("items to your cart"))
            {
                // Update the cart counter if items were added
                await UpdateCartCounterAsync();
            }
        }
        catch (Exception ex)
        {
            // Handle any errors during AI communication
            chatHistory.Add(new ChatMessage { 
                Content = $"Sorry, I encountered an error: {ex.Message}. Please try again later.", 
                IsUser = false,
                Timestamp = DateTime.Now 
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Update UI with AI response
            
            // Scroll to bottom of chat
            await ScrollToBottom();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(chatMessage) && !isLoading)
        {
            await SendChatMessage();
        }
    }

    private string FormatAgentResponse(string response)
    {
        // Format the response for better HTML display
        
        // Handle markdown-style bold text (convert **text** to <strong>text</strong>)
        response = System.Text.RegularExpressions.Regex.Replace(
            response, 
            @"\*\*([^*]+)\*\*", 
            "<strong>$1</strong>");
            
        // Handle line breaks and bullet points
        return response
            .Replace("\n\n", "<br><br>")
            .Replace("\n", "<br>")
            .Replace("•", "<br>•");
    }

    private async Task UpdateCartCounterAsync()
    {
        try
        {
            // Create a client for API calls
            var client = HttpClientFactory.CreateClient("LocalApi");
            
            // Get the current cart data
            var cartSummary = await client.GetFromJsonAsync<CartSummary>("api/Cart");
            
            if (cartSummary != null)
            {
                // Calculate total number of items in cart
                int totalItems = cartSummary.Items.Sum(item => item.Quantity);
                
                // Update the cart badge using JavaScript interop
                await JSRuntime.InvokeVoidAsync("updateCartBadge", totalItems);
                
                // Notify other components that cart has been updated
                CartUpdateService.NotifyCartUpdated();
            }
        }
        catch (Exception ex)
        {
            // Silently handle errors - we don't want to disturb the chat experience if cart update fails
            Console.WriteLine($"Error updating cart counter: {ex.Message}");
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            // Use JSRuntime to scroll to the bottom of the chat
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
        }
        catch
        {
            // Silently fail if JS interop fails
        }
    }

    private void ToggleAgentSettings()
    {
        showAgentSettings = !showAgentSettings;
        if (showAgentSettings)
        {
            // Reset message and update temp ID with current value
            agentSettingsMessage = string.Empty;
            tempAgentId = AzureAIAgentService.GetCurrentAgentId() ?? string.Empty;
        }
    }

    private async Task UpdateAgentId()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(tempAgentId))
            {
                agentSettingsMessage = "Agent ID cannot be empty";
                agentSettingsSuccess = false;
                return;
            }

            // Update the agent ID
            AzureAIAgentService.SetAgentId(tempAgentId.Trim());
            
            // Clear current thread to start fresh with new agent
            currentThreadId = null;
            AgentModeService.CurrentThreadId = null;
            chatHistory.Clear();
            
            agentSettingsMessage = "Agent ID updated successfully";
            agentSettingsSuccess = true;
            
            // Hide settings after successful update
            await Task.Delay(1500); // Show success message for 1.5 seconds
            showAgentSettings = false;
            agentSettingsMessage = string.Empty;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            agentSettingsMessage = $"Error updating Agent ID: {ex.Message}";
            agentSettingsSuccess = false;
        }
    }

    private void CancelAgentSettings()
    {
        showAgentSettings = false;
        agentSettingsMessage = string.Empty;
        tempAgentId = AzureAIAgentService.GetCurrentAgentId() ?? string.Empty;
    }
}
